// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dairy/dairy.proto

package godairyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Godairy_NewTask_FullMethodName     = "/dairy.Godairy/NewTask"
	Godairy_NewDate_FullMethodName     = "/dairy.Godairy/NewDate"
	Godairy_Date_FullMethodName        = "/dairy.Godairy/Date"
	Godairy_TasksOfDate_FullMethodName = "/dairy.Godairy/TasksOfDate"
	Godairy_Task_FullMethodName        = "/dairy.Godairy/Task"
	Godairy_DeleteTask_FullMethodName  = "/dairy.Godairy/DeleteTask"
)

// GodairyClient is the client API for Godairy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GodairyClient interface {
	NewTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*NewTaskResponse, error)
	NewDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateResponse, error)
	Date(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateResponse, error)
	TasksOfDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	Task(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type godairyClient struct {
	cc grpc.ClientConnInterface
}

func NewGodairyClient(cc grpc.ClientConnInterface) GodairyClient {
	return &godairyClient{cc}
}

func (c *godairyClient) NewTask(ctx context.Context, in *NewTaskRequest, opts ...grpc.CallOption) (*NewTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewTaskResponse)
	err := c.cc.Invoke(ctx, Godairy_NewTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godairyClient) NewDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DateResponse)
	err := c.cc.Invoke(ctx, Godairy_NewDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godairyClient) Date(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*DateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DateResponse)
	err := c.cc.Invoke(ctx, Godairy_Date_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godairyClient) TasksOfDate(ctx context.Context, in *DateRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, Godairy_TasksOfDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godairyClient) Task(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, Godairy_Task_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *godairyClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Godairy_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GodairyServer is the server API for Godairy service.
// All implementations must embed UnimplementedGodairyServer
// for forward compatibility.
type GodairyServer interface {
	NewTask(context.Context, *NewTaskRequest) (*NewTaskResponse, error)
	NewDate(context.Context, *DateRequest) (*DateResponse, error)
	Date(context.Context, *DateRequest) (*DateResponse, error)
	TasksOfDate(context.Context, *DateRequest) (*TaskResponse, error)
	Task(context.Context, *TaskRequest) (*TaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGodairyServer()
}

// UnimplementedGodairyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGodairyServer struct{}

func (UnimplementedGodairyServer) NewTask(context.Context, *NewTaskRequest) (*NewTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTask not implemented")
}
func (UnimplementedGodairyServer) NewDate(context.Context, *DateRequest) (*DateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDate not implemented")
}
func (UnimplementedGodairyServer) Date(context.Context, *DateRequest) (*DateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Date not implemented")
}
func (UnimplementedGodairyServer) TasksOfDate(context.Context, *DateRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksOfDate not implemented")
}
func (UnimplementedGodairyServer) Task(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Task not implemented")
}
func (UnimplementedGodairyServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedGodairyServer) mustEmbedUnimplementedGodairyServer() {}
func (UnimplementedGodairyServer) testEmbeddedByValue()                 {}

// UnsafeGodairyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GodairyServer will
// result in compilation errors.
type UnsafeGodairyServer interface {
	mustEmbedUnimplementedGodairyServer()
}

func RegisterGodairyServer(s grpc.ServiceRegistrar, srv GodairyServer) {
	// If the following call pancis, it indicates UnimplementedGodairyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Godairy_ServiceDesc, srv)
}

func _Godairy_NewTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodairyServer).NewTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Godairy_NewTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodairyServer).NewTask(ctx, req.(*NewTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Godairy_NewDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodairyServer).NewDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Godairy_NewDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodairyServer).NewDate(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Godairy_Date_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodairyServer).Date(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Godairy_Date_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodairyServer).Date(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Godairy_TasksOfDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodairyServer).TasksOfDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Godairy_TasksOfDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodairyServer).TasksOfDate(ctx, req.(*DateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Godairy_Task_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodairyServer).Task(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Godairy_Task_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodairyServer).Task(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Godairy_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GodairyServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Godairy_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GodairyServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Godairy_ServiceDesc is the grpc.ServiceDesc for Godairy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Godairy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dairy.Godairy",
	HandlerType: (*GodairyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTask",
			Handler:    _Godairy_NewTask_Handler,
		},
		{
			MethodName: "NewDate",
			Handler:    _Godairy_NewDate_Handler,
		},
		{
			MethodName: "Date",
			Handler:    _Godairy_Date_Handler,
		},
		{
			MethodName: "TasksOfDate",
			Handler:    _Godairy_TasksOfDate_Handler,
		},
		{
			MethodName: "Task",
			Handler:    _Godairy_Task_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Godairy_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dairy/dairy.proto",
}
